var UPDATE_EVERY = 15s
var MAX_NOUPDATE_PERIOD = 1h
var SERVER_DISCOVERY_WINDOW = 12w
var HOST_CHECK_PERIOD = 15m
var UPDATES_IN_MAX_NOUPDATE_PERIOD = 240

// fetch all hosts available in SERVER_DISCOVERY_WINDOW
// and find the hosts that have not updated in MAX_NOUPDATE_PERIOD
// using UDF (withoutUpdates) add noupdates=2 field for servers which
// have not updated within MAX_NOUPDATE_PERIOD and noupdates=1 for
// servers which have updated, at least once, within MAX_NOUPDATE_PERIOD

// raise critical alert for servers which haven't updated within
// MAX_NOUPDATE_PERIOD

// insert servers which haven't updated within MAX_NOUPDATE_PERIOD
// into InfluxDB

var hosts = batch
  |Query('''
    SELECT last(uptime) as last_uptime
    FROM ServerStats."default".system
  ''')
    .period(SERVER_DISCOVERY_WINDOW)
    .every(HOST_CHECK_PERIOD)
    .groupBy('host')
  @withoutUpdates()
    .period(MAX_NOUPDATE_PERIOD)
    .roundDuration(HOST_CHECK_PERIOD)
    .updateDuration(UPDATE_EVERY)

hosts
  |alert()
    .StateChangesOnly()
    .crit(lambda: "missingUpdates" == UPDATES_IN_MAX_NOUPDATE_PERIOD)
    .id('kapacitor/{{ .TaskName }}/{{ index .Tags "host" }}')
    .message('{{ .Level }} - host down alert for Host {{ index .Tags "host" }}')
    .details('''
      <pre>
        Kapacitor task {{ .TaskName }} raised {{ .Level }} alert for {{ index .Tags "host" }} at {{ .Time }}
        CRITICAL alert state implies that the host {{ index .Tags "host" }} has not communicated with InfluxDB for an extended period.
        OK alert is sent when the host transitions out of CRITICAL alert state.
      </pre>
    ''')
    .email('kthommandra@arista.com')
    .log('/var/log/kapacitor/tick-hostdown.log')

hosts
  |where(lambda: "missingUpdates" == UPDATES_IN_MAX_NOUPDATE_PERIOD)
  |eval(lambda: "missingUpdates", lambda: "missingUpdates")
    .as('missingUpdates', 'expectedUpdates')
    .keep('missingUpdates', 'expectedUpdates')
  |influxDBOut()
    .database('ServerStats')
    .retentionPolicy('default')
    .measurement('hostStatus')

